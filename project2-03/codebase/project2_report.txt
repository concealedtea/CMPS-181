1. Basic information
Team Number: 3
Student ID# of Submitter: 1450874
Name of Submitter: Matthew Tan
ID#s and Names for others on the Team:
ID: 1509070
Name: Hon Yu Ho

2. Metadata
- Show your metadata design (Tables and Columns table) and information about each column.
Tables table has four columns: table-id, table-name, file-name, and system.
Tables table:
table-id -- int variable for identifying the table id
table-name -- string variable for identifying the table name (limited to 50 characters)
file-name -- string variable for identifying which file the record resides in (limited to 50 characters)
system -- int variable for identifying whether a table is a system table or not

Columns table:
table-id -- int variable for identifying table id
column-name -- string variable for identifying column name (limited to 50 characters)
column-type -- int variable for identifying the column type
column-length -- int variable for identifying the length of the column
column-position -- int variable for identifying the column position (which column the tuple is in)

3. Internal Record Format
- Show your record format design and describe how your design satisfies O(1) field access. If not, just mention that your team hasn't implemented this feature.
First, 4 bytes store the number of fields in the record.
Second, the null indicator which takes ceil(#attributes/8.0) bytes.
Third, Record Directory:
4 bytes for each attribute for the right offset of each field.
(Left offset of first field would just be the end of the directory)
Fourth, the actual data in sequential order (nothing stored if null)
Integer and Real are 4 bytes,

- Describe how you store a VarChar field.
VarChar is a variable number of bytes (length is found by using rightOffset - leftOffset)

- Describe how you deal with an update and delete.
Delete: records with offsets closer to the middle are moved over the deleted record
Update: records with offsets closer to the middle are moved to make room for bigger record, or compact if smaller record


4. Page Format
- Show your page format design.
At start of the page is 2 bytes for an offset to the start of free space.
Next 2 bytes is for the number of slots.
Next is the slot directory, 8 bytes for each record (4 for offset to record in page, 4 for length of record)

- Describe how you deal with an update and delete.
Delete: record entry in slot directory is set to 0,0
Update: record entry set with new offset, or with forwarding address


5. File Format
- Show your file format design.
All the files that were created end with ".tbl". Two catalog files are called Tables.tbl and Columns.tbl. The Tables.tbl and Columns.tbl
are all 4K size. The non-system tables are of varying sizes. These files are all in binary form. The files are created using createFile() from pfm.cc written in Project1. After creating the files, the columns are inserted into Tables.tbl and Columns.tbl subsequently.


6. Implementation Detail
- Other implementation details goes here.  For example:  
- Describe your use of Forwarding Addresses, including what happens when a Forwarding Address needs to be forwarded to yet another page.
When forwarding, offset will store the page number as a negative number, and length will store the slot number.
Functions will check for negative offsets to determine if using forwarding address.
Update will delete the record at the forwarded address, then act as if updating an empty record in the page.

- Describe how a scan is done, touching each record once even when there are Forwarding Addresses.
Scan goes through the slot directory, skipping entries with offsets <= 0 (offset < 0 is forwarding address; offset = 0 is deleted record)

- Describe how you determine that a previously slot on a page is empty (after record is deleted), so that the slot can be re-used for another record.  (Yes, a record's rid is supposed to be permanent, but only while the record exists.)
When inserting, check the slot directory for a record entry set to 0,0. If found, then use that slot.


7. Other (optional)
- Freely use this section to tell us about things that are related to the project 2, but not related to the other sections, such as design and implementation information for Advanced Features, if you've implemented them (optional).
